import React, { useState, useEffect, createContext, useContext } from 'react';
import * as TabsPrimitive from '@radix-ui/react-tabs';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { Slot } from '@radix-ui/react-slot';
import { BarChart, DollarSign, Users, ArrowRight, AlertCircle, Loader2 } from 'lucide-react';
import { cva } from 'class-variance-authority';
import { cn } from './utils';

// Utility function (typically in a separate file)
function cn(...inputs) {
  return inputs.filter(Boolean).join(' ');
}

// UI Components
const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
));
CardFooter.displayName = "CardFooter";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        outline: "border border-input hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 py-2 px-4",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props}
    />
  );
});
Button.displayName = "Button";

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = "Input";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

const Dialog = DialogPrimitive.Root;
const DialogTrigger = DialogPrimitive.Trigger;

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPrimitive.Portal>
    <DialogPrimitive.Overlay className="fixed inset-0 z-50 bg-black/50" />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full",
        className
      )}
      {...props}
    >
      {children}
    </DialogPrimitive.Content>
  </DialogPrimitive.Portal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({ className, ...props }) => (
  <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({ className, ...props }) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold leading-none tracking-tight", className)} {...props} />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(
      "relative w-full rounded-lg border p-4",
      {
        "bg-destructive text-destructive-foreground": variant === "destructive",
      },
      className
    )}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5 ref={ref} className={cn("mb-1 font-medium leading-none tracking-tight", className)} {...props} />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("text-sm [&_p]:leading-relaxed", className)} {...props} />
));
AlertDescription.displayName = "AlertDescription";

// Auth Context
const AuthContext = createContext({
  user: null,
  loading: true,
  login: async () => {},
  logout: () => {},
});

const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    try {
      const storedUser = localStorage.getItem('donafrica_user');
      if (storedUser) {
        setUser(JSON.parse(storedUser));
      }
    } catch (error) {
      console.error("Error checking auth status:", error);
    } finally {
      setLoading(false);
    }
  };

  const login = async (account) => {
    try {
      setLoading(true);
      const message = `Welcome to Donafrica!\n\nClick to sign in and accept the Terms of Service.\n\nThis request will not trigger a blockchain transaction or cost any gas fees.`;
      const signature = await window.ethereum.request({
        method: 'personal_sign',
        params: [message, account],
      });
      
      const userData = {
        address: account,
        signature,
        username: `User_${account.slice(2, 8)}`,
        joinedAt: new Date().toISOString(),
      };
      
      localStorage.setItem('donafrica_user', JSON.stringify(userData));
      setUser(userData);
      return userData;
    } catch (error) {
      throw new Error(error.message);
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('donafrica_user');
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

const useAuth = () => useContext(AuthContext);

// Main App Component
const DonafricaApp = () => {
  const { user, loading: authLoading, login, logout } = useAuth();
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userDonations, setUserDonations] = useState([]);

  useEffect(() => {
    if (!authLoading) {
      fetchCampaigns();
      if (user) {
        fetchUserDonations();
      }
    }
  }, [authLoading, user]);

  const connectWallet = async () => {
    try {
      if (window.ethereum) {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        return accounts[0];
      } else {
        throw new Error("Please install MetaMask to use this app");
      }
    } catch (error) {
      throw new Error("Failed to connect wallet");
    }
  };

  const handleLogin = async () => {
    try {
      setError(null);
      const account = await connectWallet();
      await login(account);
    } catch (error) {
      setError(error.message);
    }
  };

  const fetchCampaigns = async () => {
    setLoading(true);
    try {
      // Simulated fetch - in reality, this would call the smart contract
      setCampaigns([
        { id: 1, title: "Education for Rural Children", raised: "2.5", goal: "5", beneficiaries: 120 },
        { id: 2, title: "Clean Water Initiative", raised: "1.8", goal: "3", beneficiaries: 500 },
        { id: 3, title: "Healthcare Access Project", raised: "3.2", goal: "4", beneficiaries: 300 },
      ]);
    } catch (error) {
      setError("Failed to fetch campaigns");
    } finally {
      setLoading(false);
    }
  };

  const fetchUserDonations = async () => {
    try {
      // Simulated fetch - in reality, this would call the smart contract
      setUserDonations([
        { campaignId: 1, amount: "0.5", date: new Date().toISOString() },
        { campaignId: 2, amount: "0.3", date: new Date(Date.now() - 86400000).toISOString() },
      ]);
    } catch (error) {
      setError("Failed to fetch user donations");
    }
  };

  const DonationDialog = ({ campaign }) => {
    const [amount, setAmount] = useState('');
    const [donating, setDonating] = useState(false);

    const handleDonate = async () => {
      if (!user) {
        setError("Please sign in to donate");
        return;
      }
      if (!amount || isNaN(amount)) return;
      setDonating(true);
      try {
        // Simulated donation - in reality, this would call the smart contract
        await new Promise(resolve => setTimeout(resolve, 1000));
        setCampaigns(campaigns.map(c => 
          c.id === campaign.id 
            ? {...c, raised: (parseFloat(c.raised) + parseFloat(amount)).toString()}
            : c
        ));
        setUserDonations([...userDonations, {
          campaignId: campaign.id,
          amount,
          date: new Date().toISOString()
        }]);
      } catch (error) {
        setError("Donation failed. Please try again.");
      } finally {
        setDonating(false);
      }
    };

    return (
      <Dialog>
        <DialogTrigger asChild>
          <Button className="w-full">Donate to this campaign</Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Donate to {campaign.title}</DialogTitle>
            <DialogDescription>
              Your donation will be processed on the Base network
            </DialogDescription>
          </DialogHeader><div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Input
                type="number"
                placeholder="Amount in ETH"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                className="col-span-4"
              />
            </div>
          </div>
          <DialogFooter>
            <Button onClick={handleDonate} disabled={donating}>
              {donating ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Processing...</> : "Confirm Donation"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    );
  };

  const CampaignCard = ({ campaign }) => (
    <Card className="mb-4">
      <CardHeader>
        <CardTitle>{campaign.title}</CardTitle>
        <CardDescription>Supporting {campaign.beneficiaries} beneficiaries</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex justify-between mb-2">
          <span>Raised: {campaign.raised} ETH</span>
          <span>Goal: {campaign.goal} ETH</span>
        </div>
        <div className="w-full bg-gray-200 h-2 rounded-full">
          <div 
            className="bg-blue-600 h-2 rounded-full" 
            style={{width: `${(parseFloat(campaign.raised) / parseFloat(campaign.goal)) * 100}%`}}
          ></div>
        </div>
      </CardContent>
      <CardFooter>
        <DonationDialog campaign={campaign} />
      </CardFooter>
    </Card>
  );

  const UserDonationsList = () => (
    <div className="space-y-4">
      {userDonations.map((donation, index) => {
        const campaign = campaigns.find(c => c.id === donation.campaignId);
        return (
          <Card key={index}>
            <CardHeader>
              <CardTitle className="text-sm">{campaign?.title}</CardTitle>
              <CardDescription>{new Date(donation.date).toLocaleDateString()}</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-lg font-bold">{donation.amount} ETH</p>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );

  const Stats = () => (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <CardTitle className="text-sm font-medium">Total Donations</CardTitle>
          <DollarSign className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">7.5 ETH</div>
          <p className="text-xs text-muted-foreground">+20.1% from last month</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <CardTitle className="text-sm font-medium">Active Campaigns</CardTitle>
          <BarChart className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{campaigns.length}</div>
          <p className="text-xs text-muted-foreground">2 completed this month</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <CardTitle className="text-sm font-medium">Beneficiaries</CardTitle>
          <Users className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">
            {campaigns.reduce((acc, curr) => acc + curr.beneficiaries, 0)}
          </div>
          <p className="text-xs text-muted-foreground">Across all campaigns</p>
        </CardContent>
      </Card>
    </div>
  );

  if (authLoading || loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">Donafrica</h1>
        {user ? (
          <div className="flex items-center space-x-4">
            <span className="text-sm text-gray-500">{user.username}</span>
            <Button 
              onClick={logout}
              variant="outline"
            >
              Sign Out
            </Button>
          </div>
        ) : (
          <Button onClick={handleLogin}>
            Connect Wallet <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        )}
      </div>

      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <Stats />

      <Tabs defaultValue="active" className="mb-8">
        <TabsList>
          <TabsTrigger value="active">Active Campaigns</TabsTrigger>
          <TabsTrigger value="completed">Completed</TabsTrigger>
          <TabsTrigger value="my-donations">My Donations</TabsTrigger>
        </TabsList>
        <TabsContent value="active">
          {campaigns.map(campaign => (
            <CampaignCard key={campaign.id} campaign={campaign} />
          ))}
        </TabsContent>
        <TabsContent value="completed">
          <Card>
            <CardHeader>
              <CardTitle>No completed campaigns yet</CardTitle>
              <CardDescription>Check back later for updates</CardDescription>
            </CardHeader>
          </Card>
        </TabsContent>
        <TabsContent value="my-donations">
          {!user ? (
            <Card>
              <CardHeader>
                <CardTitle>Connect your wallet</CardTitle>
                <CardDescription>Connect your wallet to see your donation history</CardDescription>
              </CardHeader>
              <CardFooter>
                <Button onClick={handleLogin}>
                  Connect Wallet <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardFooter>
            </Card>
          ) : userDonations.length > 0 ? (
            <UserDonationsList />
          ) : (
            <Card>
              <CardHeader>
                <CardTitle>No donations yet</CardTitle>
                <CardDescription>Start donating to make a difference</CardDescription>
              </CardHeader>
            </Card>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
};

// Main App Wrapper
const App = () => {
  return (
    <AuthProvider>
      <DonafricaApp />
    </AuthProvider>
  );
};

export default App;
